REMO - Rule Editor for ModSecurity
----------------------------------

Remo is a project to build a graphical rule editor for ModSecurity,
an Apache security module.

Remo has been started in January 2007, the first alpha release came
out in February 2007. The plan is to go beta sometimes during spring.

Basic Concept

Modsecurity is not a simple toy. It is quite tricky to configure
successfully. Many web applications are not very simple either. Bringing
them together by writing a modsecurity ruleset is very difficult.
Modsecurity.org advertises a tested core ruleset granting you protection
from most known attacks. But this is only a blacklisting approach:
All dangerous is filtered out.

A network firewall uses a whitelisting approach; also called positive
security model: Everything is dropped outside of a short and strict
rulset. An application firewall should do exactly the same. 

But this comes with a catch: Your application does not come with a short
and strict ruleset and writing one will be tough. This is the point where
remo will come into play. It is meant as a graphical editor for this
ruleset, thus helping you to generate a whitelist of valid requests to
your application. Ideally you will be able to bundle this ruleset with
every release of your online application. We are not there yet. Far from
it to be honest. But the development has started and you are welcome to
join in.  Screenshot detail Features

This is the short list of features done so far:

 * Ruby on rails application with ajax use
 * Enter http requests, display them, edit them, delete 
   them, rearrange them
 * Edit http headers for every request
 * Edit http cookie arguments for every request
 * Edit http query string arguments for every request
 * Edit http post arguments for every request
 * Support for parameter names with regular expressions
   I.e. post parameters like user_1, user_2, theme[bluecoat]_path etc.
 * Predefined value domains
   No need to edit a regular expression for every parameter 
   anymore. Just select a predefined domain.
 * Support custom http_status codes for every failed 
   pattern match (including redirect with custom location)
 * Support custom http_status codes for every missing 
   mandatory parameter (including redirect with custom location)

Near future plans

 * Better default value domains
 * Going beta

